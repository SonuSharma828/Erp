import csv
from django.core.serializers.json import DjangoJSONEncoder
from django.shortcuts import render,redirect, get_object_or_404
from .models import (
    SparePartTransaction,
    MonthlySale,
    MonthlyExpense,
    MonthlyVendorPayment
)
from django.db.models import Sum
from django.shortcuts import render
from .models import SparePart
from .forms import SparePartTransactionForm
from django.http import HttpResponse, JsonResponse
from django.contrib.auth.decorators import login_required
from core.models import PaymentMode

@login_required
def spp_dashboard(request):
    # Calculate totals
    total_sales = MonthlySale.objects.aggregate(Sum('amount'))['amount__sum'] or 0
    total_expenses = MonthlyExpense.objects.aggregate(Sum('amount'))['amount__sum'] or 0
    total_vendor_payments = MonthlyVendorPayment.objects.aggregate(Sum('amount'))['amount__sum'] or 0
    total_gross_payments = total_expenses + total_vendor_payments

    # Profit / Loss
    gross_profit = total_sales - total_gross_payments
    gross_loss = total_gross_payments - total_sales if total_sales < total_gross_payments else 0

    # Transaction Count (for fun metrics)
    total_transactions = SparePartTransaction.objects.count()

    context = {
        'total_sales': total_sales,
        'total_expenses': total_expenses,
        'total_vendor_payments': total_vendor_payments,
        'total_gross_payments': total_gross_payments,
        'gross_profit': gross_profit,
        'gross_loss': gross_loss,
        'total_transactions': total_transactions,
    }

    return render(request, 'spp_dashboard.html', context)



@login_required
def manage_spareparts(request):
    spareparts = SparePart.objects.all()
    return render(request, 'manage_spareparts.html', {'spareparts': spareparts})

@login_required
def add_transaction(request):
    if request.method == 'POST':
        form = SparePartTransactionForm(request.POST)
        if form.is_valid():
            form.save()
            return JsonResponse({'success': True})
        else:
            return JsonResponse({'success': False, 'errors': form.errors})
    else:
        form = SparePartTransactionForm()
    return render(request, 'add_transaction_form.html', {'form': form})

@login_required
def export_csv(request):
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = 'attachment; filename="spp_report.csv"'

    writer = csv.writer(response)
    writer.writerow(['Total Sales', 'Total Expenses', 'Total Vendor Payments', 'Gross Profit/Loss'])

    total_sales = MonthlySale.objects.aggregate(total=Sum('amount'))['total'] or 0
    total_expenses = MonthlyExpense.objects.aggregate(total=Sum('amount'))['total'] or 0
    total_vendor_payments = MonthlyVendorPayment.objects.aggregate(total=Sum('amount'))['total'] or 0
    gross_profit = total_sales - (total_expenses + total_vendor_payments)

    writer.writerow([total_sales, total_expenses, total_vendor_payments, gross_profit])

    return response



from django.shortcuts import render, redirect
from .models import Voucher
from .forms import VoucherForm
from django.http import JsonResponse

# View to create a new voucher
@login_required
def create_voucher(request):
    if request.method == 'POST':
        form = VoucherForm(request.POST)
        if form.is_valid():
            form.save()
            return JsonResponse({'success': True})
        else:
            return JsonResponse({'success': False, 'errors': form.errors})
    else:
        form = VoucherForm()
    return render(request, 'create_voucher.html', {'form': form})

@login_required
def edit_voucher(request, pk):
    voucher = get_object_or_404(Voucher, pk=pk)
    if request.method == 'POST':
        form = VoucherForm(request.POST, instance=voucher)
        if form.is_valid():
            form.save()
            return redirect('voucher_history')
    else:
        form = VoucherForm(instance=voucher)
    return render(request, 'edit_voucher.html', {'form': form})

@login_required
def delete_voucher(request, pk):
    voucher = get_object_or_404(Voucher, pk=pk)
    voucher.delete()
    return redirect('voucher_history')

# View to list all vouchers in the history
@login_required
def voucher_history(request):
    vouchers = Voucher.objects.all()
    return render(request, 'voucher_history.html', {'vouchers': vouchers})



from django.shortcuts import render, redirect
from .models import MonthlySale, MonthlyExpense, MonthlyVendorPayment
from .forms import MonthlySaleForm, MonthlyExpenseForm, MonthlyVendorPaymentForm

@login_required
def manage_sales(request):
    #sales = MonthlySale.objects.all()
    sales = MonthlySale.objects.prefetch_related('payments', 'product').all()
    return render(request, 'manage_sales.html', {'sales': sales})



from django.shortcuts import render, redirect
from .forms import MonthlySaleForm, PaymentEntryFormSet
from django.shortcuts import render, redirect
from .forms import MonthlySaleForm
from .models import MonthlySale, PaymentEntry

def add_sales(request):
    if request.method == 'POST':
        sale_form = MonthlySaleForm(request.POST)
        
        # Get number of dynamic payment forms
        total = int(request.POST.get('payments-TOTAL_FORMS', 0))

        # Prepare list of payments from POST data
        payments = []
        for i in range(total):
            payment_types = PaymentMode.objects.all()
            amount = request.POST.get(f'payments-{i}-amount')
            if payment_type and amount:
                payments.append({
                    'payment_type': payment_type,
                    'amount': float(amount)
                })

        if sale_form.is_valid():
            sale = sale_form.save()  # auto-sets date via model default

            for entry in payments:
                PaymentEntry.objects.create(
                    sale=sale,
                    payment_type=entry['payment_type'],
                    amount=entry['amount']
                )

            return redirect('manage_sales')  # âœ… replace with your actual list view name

    else:
        sale_form = MonthlySaleForm(
    payment_types_json = json.dumps(list(PaymentType.objects.values('id', 'name')),cls=DjangoJSONEncoder)
    return render(request, 'add_sales.html', {
        'sale_form': sale_form,
    })

# Expenses 
@login_required
def add_expenses(request):
    if request.method == 'POST':
        form = MonthlyExpenseForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('manage_expenses')
    else:
        form = MonthlyExpenseForm()
    return render(request, 'add_expenses.html', {'form': form})

@login_required
def manage_expenses(request):
    expenses = MonthlyExpense.objects.all()
    return render(request, 'manage_expenses.html', {'expenses': expenses})



# Vendor Payments 
@login_required
def add_vendor_payments(request):
    if request.method == 'POST':
        form = MonthlyVendorPaymentForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('manage_vendor_payments')
    else:
        form = MonthlyVendorPaymentForm()
    return render(request, 'add_vendor_payments.html', {'form': form})

@login_required
def manage_vendor_payments(request):
    vendor_payments = MonthlyVendorPayment.objects.all()
    return render(request, 'manage_vendor_payments.html', {'vendor_payments': vendor_payments})



from django.shortcuts import render, get_object_or_404, redirect
from .models import MonthlySale
from .forms import MonthlySaleForm
'''
@login_required
def edit_sales(request, pk):
    sale = get_object_or_404(MonthlySale, pk=pk)
    if request.method == 'POST':
        form = MonthlySaleForm(request.POST, instance=sale)
        if form.is_valid():
            form.save()
            return redirect('manage_sales')
    else:
        form = MonthlySaleForm(instance=sale)
    return render(request, 'edit_sales.html', {'form': form})
'''

from django.forms import modelform_factory
from django.db import transaction
from django.http import HttpResponseRedirect
from django.urls import reverse
import json
from .models import MonthlySale, PaymentEntry
from .forms import MonthlySaleForm

@login_required
@transaction.atomic
def edit_sales(request, pk):
    sale = get_object_or_404(MonthlySale, pk=pk)
    if request.method == 'POST':
        form = MonthlySaleForm(request.POST, instance=sale)
        if form.is_valid():
            form.save()

            # Clear existing payments
            sale.payments.all().delete()

            total_forms = int(request.POST.get('payments-TOTAL_FORMS', 0))
            for i in range(total_forms):
                p_type = PaymentMode.objects.all()
                p_amount = request.POST.get(f'payments-{i}-amount')
                if p_type and p_amount:
                    PaymentEntry.objects.create(
                        sale=sale,
                        payment_type=p_type,
                        amount=p_amount
                    )
            return redirect('manage_sales')
    else:
        form = MonthlySaleForm(instance=sale)
        payments = sale.payments.all()
        payments_json = json.dumps(
            [{'type': p.payment_type, 'amount': float(p.amount)} for p in payments]
        )

    payment_types_json = json.dumps(list(PaymentType.objects.values('id', 'name')),cls=DjangoJSONEncoder)
    payment_types = PaymentMode.objects.all()
    return render(request, 'edit_sales.html', {
        'sale_form': form,
        'sale': sale,
        'payment_types': payment_types,
        'payments_json': payments_json,
        'payment_types_json': payment_types_json,
    })

@login_required
def delete_sales(request, pk):
    sale = get_object_or_404(MonthlySale, pk=pk)
    sale.delete()
    return redirect('manage_sales')


from .models import MonthlyExpense
from .forms import MonthlyExpenseForm

@login_required
def edit_expense(request, pk):
    expense = get_object_or_404(MonthlyExpense, pk=pk)
    if request.method == 'POST':
        form = MonthlyExpenseForm(request.POST, instance=expense)
        if form.is_valid():
            form.save()
            return redirect('manage_expenses')
    else:
        form = MonthlyExpenseForm(instance=expense)
    return render(request, 'edit_expense.html', {'form': form})

@login_required
def delete_expense(request, pk):
    expense = get_object_or_404(MonthlyExpense, pk=pk)
    expense.delete()
    return redirect('manage_expenses')

from .models import MonthlyVendorPayment
from .forms import MonthlyVendorPaymentForm

@login_required
def edit_vendor_payment(request, pk):
    payment = get_object_or_404(MonthlyVendorPayment, pk=pk)
    if request.method == 'POST':
        form = MonthlyVendorPaymentForm(request.POST, instance=payment)
        if form.is_valid():
            form.save()
            return redirect('manage_vendor_payments')
    else:
        form = MonthlyVendorPaymentForm(instance=payment)
    return render(request, 'edit_vendor_payments.html', {'form': form})

@login_required
def delete_vendor_payment(request, pk):
    payment = get_object_or_404(MonthlyVendorPayment, pk=pk)
    payment.delete()
    return redirect('manage_vendor_payments')



from django.db.models import Sum
from datetime import datetime


@login_required
def monthly_sales(request):
    current_month = datetime.now().month
    current_year = datetime.now().year
    sales = MonthlySale.objects.filter(date__month=current_month, date__year=current_year)
    total_sales = sales.aggregate(Sum('amount'))['amount__sum'] or 0
    return render(request, 'monthly_sales.html', {'sales': sales, 'total_sales': total_sales})
